import numpy as np
import time
import re
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity


class PSO:
    def __init__(self, obj_func, bounds, num_particles=50, num_iterations=100):
        """
        Initializes the PSO object.

        Parameters:
        obj_func (callable): Objective function to be optimized.
        bounds (numpy.ndarray): A two-dimensional array of shape (n, 2), where n is the number of
                                 dimensions in the parameter space. The ith row should contain the
                                 minimum and maximum values for the ith dimension.
        num_particles (int): Number of particles in the swarm (default: 50).
        num_iterations (int): Maximum number of iterations (default: 100).

        """
        self.obj_func = obj_func
        self.bounds = bounds
        self.num_particles = num_particles
        self.num_iterations = num_iterations

    def optimize(self, verbose=False):
        """
        Optimizes the objective function using PSO.

        Parameters:
        verbose (bool): Whether to print progress during optimization (default: False).
        Returns:
        best_position (numpy.ndarray): The best position found.
        best_score (float): The best score found.
        timer (float): The time taken to run the algorithm.
        """

        if verbose:
            print('Running the Particle Swarm Optimization algorithm...')

        # Start the timer
        start = time.time()

        # Initialize the swarm
        self.swarm = np.random.uniform(self.bounds[:, 0], self.bounds[:, 1],
                                       size=(self.num_particles, len(self.bounds)))
        self.velocities = np.zeros_like(self.swarm)
        self.particle_best = self.swarm.copy()
        self.particle_best_scores = np.full(self.num_particles, np.inf)
        self.global_best = None
        self.global_best_score = np.inf

        # Run the optimization loop
        for i in range(self.num_iterations):
            # Evaluate the objective function for each particle
            particle_scores = np.array([self.obj_func(p) for p in self.swarm])

            # Update the particle best scores and positions
            improved = particle_scores < self.particle_best_scores
            self.particle_best_scores[improved] = particle_scores[improved]
            self.particle_best[improved] = self.swarm[improved]

            # Update the global best score and position
            j = np.argmin(particle_scores)
            candidate_position = self.swarm[j]
            candidate_score = particle_scores[j]
            if candidate_score < self.global_best_score and np.all(candidate_position >= 0):
                self.global_best_score = candidate_score
                self.global_best = candidate_position.copy()

            # Update the particle velocities and positions
            r1 = np.random.rand(self.num_particles, 1)
            r2 = np.random.rand(self.num_particles, 1)
            self.velocities = 0.5 * self.velocities + \
                              2.0 * r1 * (self.particle_best - self.swarm) + \
                              2.0 * r2 * (self.global_best - self.swarm)
            # Ensure the velocities do not exceed bounds
            # velocity_max = (self.bounds[:, 1] - self.bounds[:, 0]) / 2
            # self.velocities = np.clip(self.velocities, -velocity_max, velocity_max)
            # 计算 velocity_max 时加入绝对值保护
            velocity_max = np.abs(self.bounds[:, 1] - self.bounds[:, 0]) / 2
            self.velocities = np.clip(self.velocities, -velocity_max, velocity_max)
            # Update the positions
            # self.swarm += self.velocities
            # # Enforce the bounds on the swarm using np.clip to ensure positions remain within bounds
            # self.swarm = np.clip(self.swarm, self.bounds[:, 0], self.bounds[:, 1])
            # After updating positions
            self.swarm += self.velocities
            # Correct clipping: make bounds broadcastable to self.swarm shape
            lower_bounds = self.bounds[:, 0][np.newaxis, :]  # shape (1, n_dimensions)
            upper_bounds = self.bounds[:, 1][np.newaxis, :]  # shape (1, n_dimensions)
            self.swarm = np.clip(self.swarm, lower_bounds, upper_bounds)

        # Stop the timer
        end = time.time()
        if verbose:
            print("The algorithm has finished running.")

        # Calculate the time taken
        timer = end - start

        # Print progress
        if verbose:
            print(
                f"Iteration {i + 1}/{self.num_iterations}: Best score = {self.global_best_score} & Best position = {self.global_best}")
            print(f"Time taken: {timer:f} ms.")
        if np.any(self.global_best < 0):
            self.global_best = np.clip(self.global_best, 0, None)

        return np.round(self.global_best, 1), self.global_best_score, timer

# 加载营养数据
def load_nutrition_data(file_path='D:/code/MOBO/zj/analysis_recipes/file/19_nutritional_data.xlsx'):
    df = pd.read_excel(file_path)
    df.columns = df.columns.str.strip()
    df['食物名称'] = df['食物名称'].str.strip()
    return df


# 计算营养成分总和
def calculate_nutrients(ingredients, nutrition_df):
    nutrient_sums = np.zeros(len(nutrition_df.columns) - 2)
    for name, weight in ingredients:
        if name.strip() in nutrition_df['食物名称'].values:
            nutrient_values = nutrition_df[nutrition_df['食物名称'] == name.strip()].values[0][2:].astype(float)
            nutrient_sums += nutrient_values * (weight / 100)

    return nutrient_sums


def obtain_target(age,gender,pal):
    if 1 <= age < 2:#维生素B1又称硫胺素,维生素B2又叫核黄素,胆固醇又称胆甾醇 2000千卡 × 20% = 400千卡 400千卡 ÷ 9千卡/克 = 约44克
        if gender[0]=="男":
            target_dict = { "热量(千卡)": 900, "硫胺素(毫克)": 0.6, "钙(毫克)": '500-1500',"蛋白质(克)": 25, "核黄素(毫克)": 0.7, "镁(毫克)": 140, "脂肪(克)": 315,  "烟酸(毫克)": '6-11',  "铁(毫克)": '10-25', "碳水化合物(克)": '120-146.3',
                "维生素C(毫克)": '40-400', "锰(毫克)": 2, "膳食纤维(克)": '5-10', "维生素E(毫克)": '6-150', "锌(毫克)": '4-9',  "维生素A(微克)": '340-700', "铜(毫克)": '0.3-2',  "钾(毫克)": 900,  "磷(毫克)": 300,  "钠(毫克)": 500,   "硒(微克)": '25-80'
            }
        else:
            target_dict = {  "热量(千卡)": 800, "硫胺素(毫克)": 0.6, "钙(毫克)": '500-1500', "蛋白质(克)": 25,"核黄素(毫克)": 0.6, "镁(毫克)": 140,"脂肪(克)": 280, "烟酸(毫克)": '5-11', "铁(毫克)": '10-25',"碳水化合物(克)": '120-129.9',
                "维生素C(毫克)": '40-400', "锰(毫克)": 1.5, "膳食纤维(克)": '5-10',"维生素E(毫克)": '6-150', "锌(毫克)": '4-9', "维生素A(微克)": '330-700', "铜(毫克)": '0.3-2',  "钾(毫克)": 900,  "磷(毫克)": 300, "钠(毫克)": 500, "硒(微克)": '25-80'
            }

    elif 2 <= age < 3:#维生素B1又称硫胺素,维生素B2又叫核黄素,胆固醇又称胆甾醇,维生素A(RE)即视黄醇当量没有约束
        if gender[0] == "男":
            target_dict = {"热量(千卡)": 1100,"硫胺素(毫克)": 0.6, "钙(毫克)": '500-1500',"蛋白质(克)": 25, "核黄素(毫克)": 0.7, "镁(毫克)": 140, "脂肪(克)": 385, "烟酸(毫克)": '6-11', "铁(毫克)": '10-25',"碳水化合物(克)": '120-178.6',
                "维生素C(毫克)": '40-400', "锰(毫克)": 2, "膳食纤维(克)": '5-10',"维生素E(毫克)": '6-150',"锌(毫克)": '4-9',"维生素A(微克)": '340-700', "铜(毫克)": '0.3-2',  "钾(毫克)": 900, "磷(毫克)": 300, "钠(毫克)": 600, "硒(微克)": '25-80'
            }
        else:
            target_dict = { "热量(千卡)": 1000, "硫胺素(毫克)": 0.6, "钙(毫克)": '500-1500',"蛋白质(克)": 25, "核黄素(毫克)": 0.6, "镁(毫克)": 140, "脂肪(克)": 350, "烟酸(毫克)": '5-11',"铁(毫克)": '10-25', "碳水化合物(克)": '120-162.2',
                "维生素C(毫克)": '40-400', "锰(毫克)": 1.5, "膳食纤维(克)": '5-10', "维生素E(毫克)": '6-150',"锌(毫克)": '4-9',"维生素A(微克)": '330-700', "铜(毫克)": '0.3-2',"钾(毫克)": 900,  "磷(毫克)": 300, "钠(毫克)": 600, "硒(微克)": '25-80'
            }

    elif 3 <= age < 4:##维生素B1又称硫胺素,维生素B2又叫核黄素,胆固醇又称胆甾醇,维生素A(RE)即视黄醇当量没有约束
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 1250, "硫胺素(毫克)": 0.6, "钙(毫克)": '500-1500',"蛋白质(克)": 30, "核黄素(毫克)": 0.7,"镁(毫克)": 140, "脂肪(克)": 437.5, "烟酸(毫克)": '6-11', "铁(毫克)": '10-25', "碳水化合物(克)": '120-203.0',
                "维生素C(毫克)": '40-400', "锰(毫克)": 2, "膳食纤维(克)": '5-10', "维生素E(毫克)": '6-150', "锌(毫克)": '4-9', "维生素A(微克)": '340-700', "铜(毫克)": '0.3-2', "钾(毫克)": 900, "磷(毫克)": 300, "钠(毫克)": 700, "硒(微克)": '25-80'
            }
        else:
            target_dict = {
                "热量(千卡)": 1250, "硫胺素(毫克)": 0.6,  "钙(毫克)": '500-1500', "蛋白质(克)": 30,"核黄素(毫克)": 0.6,"镁(毫克)": 140, "脂肪(克)": 437.5, "烟酸(毫克)": '5-11', "铁(毫克)": '10-25', "碳水化合物(克)": '120-186.6',
                "维生素C(毫克)": '40-400', "锰(毫克)": 1.5,"膳食纤维(克)": '5-10',"维生素E(毫克)": '6-150',"锌(毫克)": '4-9',"维生素A(微克)": '330-700', "铜(毫克)": '0.3-2', "钾(毫克)": 900, "磷(毫克)": 300, "钠(毫克)": 700, "硒(微克)": '25-80'
            }

    elif 4 <= age < 5:#维生素B1又称硫胺素,维生素B2又叫核黄素,胆固醇又称胆甾醇,维生素A(RE)即视黄醇当量没有约束
        if gender[0] == "男":#数据处理到这里
            target_dict = {
                "热量(千卡)": 1300,"硫胺素(毫克)": 0.9, "钙(毫克)": '600-2000', "蛋白质(克)": '30-65',"核黄素(毫克)": 0.9, "镁(毫克)": 160,"脂肪(克)": '28.89-43.33', "烟酸(毫克)": '7-15', "铁(毫克)": '10-30', "碳水化合物(克)": '162.5-211.25',
                "维生素C(毫克)": '50-600', "锰(毫克)": '2-3.5', "膳食纤维(克)": '10-15',"维生素E(毫克)": '7-200',"锌(毫克)": '5.5-13',"维生素A(微克)": '390-1000', "铜(毫克)": '0.4-3', "钾(毫克)": 1100, "磷(毫克)": 350, "钠(毫克)": 800, "硒(微克)": '30-120'
            }
        else:
            target_dict = {
                "热量(千卡)": 1300,"硫胺素(毫克)": 0.9, "钙(毫克)": '600-2000', "蛋白质(克)": '30-65',"核黄素(毫克)": 0.8, "镁(毫克)": 160,"脂肪(克)": '28.89-43.33', "烟酸(毫克)": '6-15', "铁(毫克)": '10-30', "碳水化合物(克)": '162.5-211.25',
                "维生素C(毫克)": '50-600', "锰(毫克)": '2-3.5', "膳食纤维(克)": '10-15',"维生素E(毫克)": '7-200',"锌(毫克)": '5.5-13',"维生素A(微克)": '380-1000', "铜(毫克)": '0.4-3', "钾(毫克)": 1100, "磷(毫克)": 350, "钠(毫克)": 800, "硒(微克)": '30-120'
            }

    elif 5 <= age < 6:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 1400, "硫胺素(毫克)":0.9, "钙(毫克)": '600-2000', "蛋白质(克)": '30-70', "核黄素(毫克)": 0.9, "镁(毫克)": 160, "脂肪(克)": '31.11-46.67', "烟酸(毫克)": '7-15',"铁(毫克)": '10-30', "碳水化合物(克)": '175-227.5',
                "维生素C(毫克)": '50-600', "锰(毫克)": '2-3.5', "膳食纤维(克)": '10-15', "维生素E(毫克)": '7-200', "锌(毫克)": '5.5-13', "维生素A(微克)": '390-1000', "铜(毫克)": '0.4-3', "钾(毫克)": 1100, "磷(毫克)": 350, "钠(毫克)": 800, "硒(微克)": '30-120'
            }
        else:
            target_dict = {
                "热量(千卡)": 1400, "硫胺素(毫克)": 0.9, "钙(毫克)": '600-2000', "蛋白质(克)": '30-70', "核黄素(毫克)": 0.8, "镁(毫克)": 160, "脂肪(克)": '31.11-46.67', "烟酸(毫克)": '6-15',"铁(毫克)": '10-30', "碳水化合物(克)": '175-227.5',
                "维生素C(毫克)": '50-600', "锰(毫克)": '2-3.5', "膳食纤维(克)": '10-15', "维生素E(毫克)": '7-200', "锌(毫克)": '5.5-13', "维生素A(微克)": '380-1000', "铜(毫克)": '0.4-3', "钾(毫克)": 1100, "磷(毫克)": 350, "钠(毫克)": 800, "硒(微克)": '30-120'
            }

    elif 6 <= age < 7:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 0.9, "钙(毫克)": '600-2000', "蛋白质(克)": '', "核黄素(毫克)": 0.9, "镁(毫克)": 160, "脂肪(克)": '', "烟酸(毫克)": 7,"铁(毫克)": 10, "碳水化合物(克)": '',
                "维生素C(毫克)": '50-600', "锰(毫克)": 2, "膳食纤维(克)": '10-15', "维生素E(毫克)": '7-200', "锌(毫克)": '5.5-13', "维生素A(微克)": '390-1000', "铜(毫克)": '0.4-3', "钾(毫克)": 1100, "磷(毫克)": 350, "钠(毫克)":800, "硒(微克)": '30-120'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1400
                target_dict["蛋白质(克)"] = '35-70'
                target_dict["碳水化合物(克)"] = '175-227.5'
                target_dict["脂肪(克)"] = '31.11-46.67'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1600
                target_dict["蛋白质(克)"] = '35-80'
                target_dict["碳水化合物(克)"] = '200-260'
                target_dict["脂肪(克)"] = '35.56-53.33'
            else:
                target_dict["热量(千卡)"] = 1800
                target_dict["蛋白质(克)"] = '35-90'
                target_dict["碳水化合物(克)"] = '225-292.5'
                target_dict["脂肪(克)"] = '40-60'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 0.9, "钙(毫克)": '600-2000', "蛋白质(克)": '', "核黄素(毫克)": 0.8, "镁(毫克)": 160, "脂肪(克)": '', "烟酸(毫克)": 6, "铁(毫克)": 10, "碳水化合物(克)": '',
                "维生素C(毫克)": '50-600', "锰(毫克)": 2, "膳食纤维(克)": '10-15', "维生素E(毫克)": '7-200', "锌(毫克)": '5.5-13', "维生素A(微克)": '380-1000', "铜(毫克)": '0.4-3',"钾(毫克)": 1100, "磷(毫克)": 350, "钠(毫克)": 800, "硒(微克)": '30-120'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1300
                target_dict["蛋白质(克)"] = '35-65'
                target_dict["碳水化合物(克)"] = '162.5-211.25'
                target_dict["脂肪(克)"] = '28.89-43.33'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1450
                target_dict["蛋白质(克)"] = '35-72.5'
                target_dict["碳水化合物(克)"] = '181.25-235.625'
                target_dict["脂肪(克)"] = '32.22-48.33'
            else:#
                target_dict["热量(千卡)"] = 1650
                target_dict["蛋白质(克)"] = '35-82.5'
                target_dict["碳水化合物(克)"] = '206.25-268.13'
                target_dict["脂肪(克)"] = '36.67-55'

    elif 7 <= age < 8:#维生素B1又称硫胺素,维生素B2又叫核黄素,胆固醇又称胆甾醇,维生素A(RE)即视黄醇当量没有约束 PI建议摄入量
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1, "镁(毫克)": 200, "脂肪(克)": '', "烟酸(毫克)": '9-19',"铁(毫克)": '12-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '60-800', "锰(毫克)": '2.5-5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '9-300', "锌(毫克)": '7-21', "维生素A(微克)": '430-1300', "铜(毫克)": '0.5-3',"钾(毫克)": 1300, "磷(毫克)": 440, "钠(毫克)": 900, "硒(微克)": '40-150'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1500
                target_dict["蛋白质(克)"] = '40-75'
                target_dict["碳水化合物(克)"] = '187.5-243.75'
                target_dict["脂肪(克)"] = '33.33-50'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1700
                target_dict["蛋白质(克)"] = '40-85'
                target_dict["碳水化合物(克)"] = '212.5-276.25'
                target_dict["脂肪(克)"] = '37.78-56.67'
            else:
                target_dict["热量(千卡)"] = 1900
                target_dict["蛋白质(克)"] = '40-95'
                target_dict["碳水化合物(克)"] = '237.5-308.75'
                target_dict["脂肪(克)"] = '42.22-63.33'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 0.9, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 0.9, "镁(毫克)": 200, "脂肪(克)": '', "烟酸(毫克)": '8-19',"铁(毫克)": '12-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '60-800', "锰(毫克)": '2.5-5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '9-300', "锌(毫克)": '7-21', "维生素A(微克)": '390-1300', "铜(毫克)": '0.5-3', "钾(毫克)": 1300, "磷(毫克)": 440, "钠(毫克)": 900, "硒(微克)": '40-150'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1350
                target_dict["蛋白质(克)"] = '40-67.5'
                target_dict["碳水化合物(克)"] = '168.75-219.375'
                target_dict["脂肪(克)"] = '30-45'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1550
                target_dict["蛋白质(克)"] = '40-77.5'
                target_dict["碳水化合物(克)"] = '193.75-251.88'
                target_dict["脂肪(克)"] = '34.44-51.67'
            else:
                target_dict["热量(千卡)"] = 1750
                target_dict["蛋白质(克)"] = '40-87.5'
                target_dict["碳水化合物(克)"] = '218.75-284.375'
                target_dict["脂肪(克)"] = '38.89-58.33'
    elif 8 <= age < 9:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1, "镁(毫克)": 200, "脂肪(克)": '', "烟酸(毫克)": '9-19',"铁(毫克)": '12-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '60-800', "锰(毫克)": '2.5-5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '9-300', "锌(毫克)": '7-21', "维生素A(微克)": '430-1300', "铜(毫克)": '0.5-3', "钾(毫克)": 1300, "磷(毫克)": 440, "钠(毫克)": 900, "硒(微克)": '40-150'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1600
                target_dict["蛋白质(克)"] = '40-80'
                target_dict["碳水化合物(克)"] = '200-260'
                target_dict["脂肪(克)"] = '35.56-53.33'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1850
                target_dict["蛋白质(克)"] = '40-92.5'
                target_dict["碳水化合物(克)"] = '231.25-300.625'
                target_dict["脂肪(克)"] = '41.1-61.7'
            else:
                target_dict["热量(千卡)"] = 2100
                target_dict["蛋白质(克)"] = '40-105'
                target_dict["碳水化合物(克)"] = '262.5-341.25'
                target_dict["脂肪(克)"] =  '46.67-70'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 0.9, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 0.9, "镁(毫克)": 200, "脂肪(克)": '', "烟酸(毫克)": '8-19', "铁(毫克)": '12-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '60-800', "锰(毫克)": '2.5-5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '9-300', "锌(毫克)": '7-21', "维生素A(微克)": '430-1300', "铜(毫克)": '0.5-3', "钾(毫克)": 1300, "磷(毫克)": 440, "钠(毫克)": 900, "硒(微克)": '40-150'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1450
                target_dict["蛋白质(克)"] = '40-72.5'
                target_dict["碳水化合物(克)"] = '181.25-235.625'
                target_dict["脂肪(克)"] = '32.22-48.33'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1700
                target_dict["蛋白质(克)"] = '40-85'
                target_dict["碳水化合物(克)"] = '212.5-276.25'
                target_dict["脂肪(克)"] = '37.8-56.7'
            else:
                target_dict["热量(千卡)"] = 1900
                target_dict["蛋白质(克)"] = '40-95'
                target_dict["碳水化合物(克)"] = '237.5-308.75'
                target_dict["脂肪(克)"] = '42-63'
    elif 9 <= age < 10:
        #print(gender[0])
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.1, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.1, "镁(毫克)": 250, "脂肪(克)": '', "烟酸(毫克)": '10-23', "铁(毫克)": '16-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '75-1100', "锰(毫克)": '3.5-6.5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '11-450', "锌(毫克)": '7-24', "维生素A(微克)": '560-1800', "铜(毫克)": '0.6-5.0', "钾(毫克)": 1600, "磷(毫克)": 550, "钠(毫克)": 1100, "硒(微克)": '45-200'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1700
                target_dict["蛋白质(克)"] = '45-85'
                target_dict["碳水化合物(克)"] = '212.5-276.25'
                target_dict["脂肪(克)"] = '37.8-56.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1950
                target_dict["蛋白质(克)"] = '45-97.5'
                target_dict["碳水化合物(克)"] = '243.75-316.875'
                target_dict["脂肪(克)"] = '43.33-64.94'
            else:
                target_dict["热量(千卡)"] = 2200
                target_dict["蛋白质(克)"] = '45-110'
                target_dict["碳水化合物(克)"] = '275-357.5'
                target_dict["脂肪(克)"] ='48.89-73.33'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.1, "镁(毫克)": 250, "脂肪(克)": '', "烟酸(毫克)": '10-23',"铁(毫克)": '16-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '75-1100', "锰(毫克)": '3-6.5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '11-450', "锌(毫克)": '7-24', "维生素A(微克)": '540-1800', "铜(毫克)": '0.6-5.0',"钾(毫克)": 1600, "磷(毫克)": 550, "钠(毫克)": 1100, "硒(微克)": '45-200'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1550
                target_dict["蛋白质(克)"] = '45-77.5'
                target_dict["碳水化合物(克)"] = '193.75-251.875'
                target_dict["脂肪(克)"] = '34.44 -51.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1800
                target_dict["蛋白质(克)"] = '45-90'
                target_dict["碳水化合物(克)"] = '225-292.5'
                target_dict["脂肪(克)"] = '40-60'
            else:
                target_dict["热量(千卡)"] = 2000
                target_dict["蛋白质(克)"] = '45-100'
                target_dict["碳水化合物(克)"] = '250-325'
                target_dict["脂肪(克)"] = '44.44-66.7'
    elif 10 <= age < 11:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.1, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.1, "镁(毫克)": 250, "脂肪(克)": '', "烟酸(毫克)": '10-23', "铁(毫克)": '16-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '75-1100', "锰(毫克)": '3.5-6.5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '11-450', "锌(毫克)": 7, "维生素A(微克)": '560-1800', "铜(毫克)": '0.6-5',"钾(毫克)": 1600, "磷(毫克)": 550, "钠(毫克)": 1100, "硒(微克)": '45-200'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1800
                target_dict["蛋白质(克)"] = '50-90'
                target_dict["碳水化合物(克)"] = '225-292.5'
                target_dict["脂肪(克)"] = '40-60'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2050
                target_dict["蛋白质(克)"] = '50-102.5'
                target_dict["碳水化合物(克)"] = '256.25-333.125'
                target_dict["脂肪(克)"] = '45.56-68.33'
            else:
                target_dict["热量(千卡)"] = 2300
                target_dict["蛋白质(克)"] = '50-115'
                target_dict["碳水化合物(克)"] = '287.5-373.75'
                target_dict["脂肪(克)"] = '51.11-77'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1, "镁(毫克)": 250, "脂肪(克)": '', "烟酸(毫克)": '10-23',"铁(毫克)": '16-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '75-1100', "锰(毫克)": '3-6.5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '11-450', "锌(毫克)": 7, "维生素A(微克)": '540-1800', "铜(毫克)": '0.6-5',"钾(毫克)": 1600, "磷(毫克)": 550, "钠(毫克)": 1100, "硒(微克)": '45-200'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1650
                target_dict["蛋白质(克)"] = '50-82.5'
                target_dict["碳水化合物(克)"] = '206.25-268.125'
                target_dict["脂肪(克)"] = '36.67-55'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1900
                target_dict["蛋白质(克)"] = '50-95'
                target_dict["碳水化合物(克)"] = '237.5-308.75'
                target_dict["脂肪(克)"] = '42.22-63'
            else:
                target_dict["热量(千卡)"] = 2100
                target_dict["蛋白质(克)"] = '50-105'
                target_dict["碳水化合物(克)"] = '262.5-341.25'
                target_dict["脂肪(克)"] = '46.67-70'
    elif 11 <= age < 12:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.1, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.1, "镁(毫克)": 250, "脂肪(克)": '', "烟酸(毫克)": '10-23',"铁(毫克)": '16-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '75-1100', "锰(毫克)": '3.5-6.5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '11-450', "锌(毫克)": 7, "维生素A(微克)": '560-1800', "铜(毫克)": '0.6-5',"钾(毫克)": 1600, "磷(毫克)": 550, "钠(毫克)": 1100, "硒(微克)": '45-200'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1900
                target_dict["蛋白质(克)"] = '55-95'
                target_dict["碳水化合物(克)"] = '238-309'
                target_dict["脂肪(克)"] = '42.2-63.3'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2200
                target_dict["蛋白质(克)"] = '55-110'
                target_dict["碳水化合物(克)"] = '275-357.5'
                target_dict["脂肪(克)"] = '48.89-73.33'
            else:
                target_dict["热量(千卡)"] = 2450
                target_dict["蛋白质(克)"] = '55-122.5'
                target_dict["碳水化合物(克)"] = '306.25-398.125'
                target_dict["脂肪(克)"] = '54.44-81.7'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1, "镁(毫克)": 250, "脂肪(克)": '', "烟酸(毫克)": '10-23', "铁(毫克)": '16-35', "碳水化合物(克)": '',
                "维生素C(毫克)": '75-1100', "锰(毫克)": '3-6.5', "膳食纤维(克)": '15-20', "维生素E(毫克)": '11-450', "锌(毫克)": 7, "维生素A(微克)": '540-1800', "铜(毫克)": '0.6-5',"钾(毫克)": 1600, "磷(毫克)": 550, "钠(毫克)": 1100, "硒(微克)": '45-200'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1750
                target_dict["蛋白质(克)"] = '55-88'
                target_dict["碳水化合物(克)"] = '219-284'
                target_dict["脂肪(克)"] = '38.89-58.3'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2000
                target_dict["蛋白质(克)"] = '55-100'
                target_dict["碳水化合物(克)"] = '250-325'
                target_dict["脂肪(克)"] = '44.44-66.67'
            else:
                target_dict["热量(千卡)"] = 2250
                target_dict["蛋白质(克)"] = '55-112.5'
                target_dict["碳水化合物(克)"] = '281.25-365.625'
                target_dict["脂肪(克)"] = '50-75'
    elif 12 <= age < 15:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.4, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.4, "镁(毫克)": 320, "脂肪(克)": '', "烟酸(毫克)": '13-30',"铁(毫克)": '16-40', "碳水化合物(克)": '',
                "维生素C(毫克)": '95-1600', "锰(毫克)": '4.5-9', "膳食纤维(克)": '20-25', "维生素E(毫克)": '13-500', "锌(毫克)": '8.5-32', "维生素A(微克)": '780-2400', "铜(毫克)": '0.7-6',"钾(毫克)": 1800, "磷(毫克)": 700, "钠(毫克)": 1400, "硒(微克)": '60-300'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 2300
                target_dict["蛋白质(克)"] = '70-115'
                target_dict["碳水化合物(克)"] = '287.5-373.75'
                target_dict["脂肪(克)"] = '51.1-76.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2600
                target_dict["蛋白质(克)"] = '70-130'
                target_dict["碳水化合物(克)"] = '325-422.5'
                target_dict["脂肪(克)"] = '57.78-86.7'
            else:
                target_dict["热量(千卡)"] = 2900
                target_dict["蛋白质(克)"] = '70-145'
                target_dict["碳水化合物(克)"] = '362.5-471.25'
                target_dict["脂肪(克)"] = '64.44-96.7'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.2, "钙(毫克)": 1000, "蛋白质(克)": 60, "核黄素(毫克)": 1.2, "镁(毫克)": 320, "脂肪(克)": 0, "烟酸(毫克)": '12-30', "铁(毫克)": '18-40', "碳水化合物(克)": '',
                "维生素C(毫克)": '95-1600', "锰(毫克)": '4-9', "膳食纤维(克)": '20-25', "维生素E(毫克)": '13-500', "锌(毫克)": '7.5-32', "维生素A(微克)": '730-2400', "铜(毫克)": '0.7-6', "钾(毫克)": 1800, "磷(毫克)": 700, "钠(毫克)": 1400, "硒(微克)": '60-300'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1950
                target_dict["蛋白质(克)"] = '60-97.5'
                target_dict["碳水化合物(克)"] = '243.75-316.875'
                target_dict["脂肪(克)"] = '43.33-65'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2200
                target_dict["蛋白质(克)"] = '60-110'
                target_dict["碳水化合物(克)"] = '275-357.5'
                target_dict["脂肪(克)"] = '48.89-73.33'
            else:
                target_dict["热量(千卡)"] = 2450
                target_dict["蛋白质(克)"] = '60-122.5'
                target_dict["碳水化合物(克)"] = '306.25-398.125'
                target_dict["脂肪(克)"] = '54.44-81.67'
    elif 15 <= age < 18:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.6, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.6, "镁(毫克)": 330, "脂肪(克)": '', "烟酸(毫克)": '15-33',"铁(毫克)": '16-40', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-1800', "锰(毫克)": '5-10', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-600', "锌(毫克)": '11.5-37', "维生素A(微克)": '810-2800', "铜(毫克)": '0.8-7',"钾(毫克)": 2000, "磷(毫克)": 720, "钠(毫克)": 1600, "硒(微克)": '60-350'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 2600
                target_dict["蛋白质(克)"] = '75-130'
                target_dict["碳水化合物(克)"] = '325-422.5'
                target_dict["脂肪(克)"] = '57.78-86.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2950
                target_dict["蛋白质(克)"] = '75-147.5'
                target_dict["碳水化合物(克)"] = '368.75-479.375'
                target_dict["脂肪(克)"] = '65.56-98.3'
            else:
                target_dict["热量(千卡)"] = 3300
                target_dict["蛋白质(克)"] = '75-165'
                target_dict["碳水化合物(克)"] = '412.5-536.25'
                target_dict["脂肪(克)"] = '73.33-110'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.3, "钙(毫克)": '1000-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.2, "镁(毫克)": 330, "脂肪(克)": '', "烟酸(毫克)": '12-33', "铁(毫克)": '18-40', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-1800', "锰(毫克)": '4-10', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-600', "锌(毫克)": '8-37', "维生素A(微克)": '670-2800', "铜(毫克)": '0.8-7', "钾(毫克)": 2000, "磷(毫克)": 720, "钠(毫克)": 1600, "硒(微克)": '60-350'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 2100
                target_dict["蛋白质(克)"] = '60-105'
                target_dict["碳水化合物(克)"] = '262.5-341.25'
                target_dict["脂肪(克)"] = '46.67-70'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2350
                target_dict["蛋白质(克)"] = '60-117.5'
                target_dict["碳水化合物(克)"] = '293.75-381.875'
                target_dict["脂肪(克)"] = '52.22-78.3'
            else:
                target_dict["热量(千卡)"] = 2650
                target_dict["蛋白质(克)"] = '60-132.5'
                target_dict["碳水化合物(克)"] = '331.25-430.625'
                target_dict["脂肪(克)"] = '58.89-88'
    elif 18 <= age < 30:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.4, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.4, "镁(毫克)": 330, "脂肪(克)": '', "烟酸(毫克)": '15-35', "铁(毫克)": '12-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4.5-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '12-40', "维生素A(微克)": '770-3000', "铜(毫克)": '0.8-8',"钾(毫克)": 2000, "磷(毫克)": '720-3500', "钠(毫克)": 1500, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 2150
                target_dict["蛋白质(克)"] = '65-107.5'
                target_dict["碳水化合物(克)"] = '268.75-349.375'
                target_dict["脂肪(克)"] = '47.8-71.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2550
                target_dict["蛋白质(克)"] = '65-127.5'
                target_dict["碳水化合物(克)"] = '319-414'
                target_dict["脂肪(克)"] = '56.67-85'
            else:
                target_dict["热量(千卡)"] = 3000
                target_dict["蛋白质(克)"] = '65-150'
                target_dict["碳水化合物(克)"] = '375-487.5'
                target_dict["脂肪(克)"] = '66.67-100'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.2, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.2, "镁(毫克)": 330, "脂肪(克)": '', "烟酸(毫克)": '12-35', "铁(毫克)": '18-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '8.5-40', "维生素A(微克)": '660-3000', "铜(毫克)": '0.8-8', "钾(毫克)": 2000, "磷(毫克)": '720-3500', "钠(毫克)": 1500, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1700
                target_dict["蛋白质(克)"] = '55-85'
                target_dict["碳水化合物(克)"] = '212.5-276.25'
                target_dict["脂肪(克)"] = '37.78-56.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2100
                target_dict["蛋白质(克)"] = '55-105'
                target_dict["碳水化合物(克)"] = '262.5-341.25'
                target_dict["脂肪(克)"] = '46.67-70'
            else:
                target_dict["热量(千卡)"] = 2450
                target_dict["蛋白质(克)"] = '55-122.5'
                target_dict["碳水化合物(克)"] = '306.25-398.125'
                target_dict["脂肪(克)"] = '54.44-81.7'
    elif 30 <= age < 50:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.4, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.4, "镁(毫克)": 320, "脂肪(克)": '', "烟酸(毫克)": '15-35',"铁(毫克)": '12-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4.5-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '12-40', "维生素A(微克)": '770-3000', "铜(毫克)": '0.8-8', "钾(毫克)": 2000, "磷(毫克)": '710-3500', "钠(毫克)": 1500, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 2050
                target_dict["蛋白质(克)"] = '65-102.5'
                target_dict["碳水化合物(克)"] = '256.25-333.125'
                target_dict["脂肪(克)"] = '45.56-68.3'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2500
                target_dict["蛋白质(克)"] = '65-125'
                target_dict["碳水化合物(克)"] = '312.5-406.25'
                target_dict["脂肪(克)"] = '55.56-83.3'
            else:
                target_dict["热量(千卡)"] = 2950
                target_dict["蛋白质(克)"] = '65-147.5'
                target_dict["碳水化合物(克)"] = '368.75-479.375'
                target_dict["脂肪(克)"] = '65.56-98.3'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.2, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.2, "镁(毫克)": 320, "脂肪(克)": '', "烟酸(毫克)": '12-35',"铁(毫克)": '18-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)":'8.5-40', "维生素A(微克)": '660-3000', "铜(毫克)": '0.8-8', "钾(毫克)": 2000, "磷(毫克)": '710-3500', "钠(毫克)": 1500, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1700
                target_dict["蛋白质(克)"] = '55-85'
                target_dict["碳水化合物(克)"] = '368.75-276'
                target_dict["脂肪(克)"] = '37.8-56.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2050
                target_dict["蛋白质(克)"] = '55-102.5'
                target_dict["碳水化合物(克)"] = '368.75-333.125'
                target_dict["脂肪(克)"] = '45.56-68.3'
            else:
                target_dict["热量(千卡)"] = 2400
                target_dict["蛋白质(克)"] = '55-120'
                target_dict["碳水化合物(克)"] = '368.75-390'
                target_dict["脂肪(克)"] = '53.33-80'
    elif 50 <= age < 65:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.4, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.4, "镁(毫克)": 320, "脂肪(克)": '', "烟酸(毫克)": 15,"铁(毫克)": '12-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4.5-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '12-40', "维生素A(微克)": '750-3000', "铜(毫克)": '0.8-8', "钾(毫克)": 2000, "磷(毫克)": '710-3500', "钠(毫克)": 1500, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1950
                target_dict["蛋白质(克)"] = '65-97.5'
                target_dict["碳水化合物(克)"] = '243.75-319.375'
                target_dict["脂肪(克)"] = '43.33-65'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2400
                target_dict["蛋白质(克)"] = '65-120'
                target_dict["碳水化合物(克)"] = '300-390'
                target_dict["脂肪(克)"] = '53.33-80'
            else:
                target_dict["热量(千卡)"] = 2800
                target_dict["蛋白质(克)"] = '65-140'
                target_dict["碳水化合物(克)"] = '350-455'
                target_dict["脂肪(克)"] = '62.22-93.3'
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.2, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.2, "镁(毫克)": 320, "脂肪(克)": '', "烟酸(毫克)": '12-35', "铁(毫克)": '10-42', "碳水化合物(克)":'',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '8.5-40', "维生素A(微克)": '660-3000', "铜(毫克)": '0.8-8', "钾(毫克)": 2000, "磷(毫克)": '710-3500', "钠(毫克)": 1500, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1600
                target_dict["蛋白质(克)"] = '55-80'
                target_dict["碳水化合物(克)"] = '200-260'
                target_dict["脂肪(克)"] = '35.56-53.3'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1950
                target_dict["蛋白质(克)"] = '55-97.5'
                target_dict["碳水化合物(克)"] = '243.75-316.88'
                target_dict["脂肪(克)"] = '43.33-65'
            else:
                target_dict["热量(千卡)"] = 2300
                target_dict["蛋白质(克)"] = '55-115'
                target_dict["碳水化合物(克)"] = '287.5-373.75'
                target_dict["脂肪(克)"] = '51.11-76.7'
    elif 65 <= age < 75:
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.4, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.4, "镁(毫克)": 310, "脂肪(克)": '', "烟酸(毫克)": '15-35',"铁(毫克)": '12-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4.5-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '12-40', "维生素A(微克)": '730-3000', "铜(毫克)": '0.8-8',"钾(毫克)": 2000, "磷(毫克)": '680-3000', "钠(毫克)": 1400, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1900
                target_dict["蛋白质(克)"] = '71.25-95'
                target_dict["碳水化合物(克)"] = '237.5-308.75'
                target_dict["脂肪(克)"] = '42.22-63.3'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2300
                target_dict["蛋白质(克)"] = '72-115'
                target_dict["碳水化合物(克)"] = '287.5-373.75'
                target_dict["脂肪(克)"] = '51.11-76.7'
            else:
                print('未设定')
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.2, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.2, "镁(毫克)": 310, "脂肪(克)": '', "烟酸(毫克)": '12-35',"铁(毫克)": '10-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '8.5-40', "维生素A(微克)": '640-3000', "铜(毫克)": '0.8-8',"钾(毫克)": 2000, "磷(毫克)": '680-3000', "钠(毫克)": 1400, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1550
                target_dict["蛋白质(克)"] = '62-77.5'
                target_dict["碳水化合物(克)"] = '193.75-251.875'
                target_dict["脂肪(克)"] = '34.44-51.7'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1850
                target_dict["蛋白质(克)"] = '62-92.5'
                target_dict["碳水化合物(克)"] = '231.25-300.625'
                target_dict["脂肪(克)"] = '41.11-61.7'
            else:
                print('未设定')
    else:#75-
        if gender[0] == "男":
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.4, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.4, "镁(毫克)": 300, "脂肪(克)": '', "烟酸(毫克)": '15-35', "铁(毫克)": '12-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4.5-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '12-40', "维生素A(微克)": '710-3000', "铜(毫克)": '0.7-8',"钾(毫克)": 2000, "磷(毫克)": '680-3000', "钠(毫克)": 1400, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1800
                target_dict["蛋白质(克)"] = '72-90'
                target_dict["碳水化合物(克)"] = '225-292.5'
                target_dict["脂肪(克)"] = '40-60'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 2200
                target_dict["蛋白质(克)"] = '72-110'
                target_dict["碳水化合物(克)"] = '275-357.5'
                target_dict["脂肪(克)"] = '48.89-73.3'
            else:
                print('未设定')
        else:
            target_dict = {
                "热量(千卡)": 0, "硫胺素(毫克)": 1.2, "钙(毫克)": '800-2000', "蛋白质(克)": '', "核黄素(毫克)": 1.2, "镁(毫克)": 300, "脂肪(克)": '', "烟酸(毫克)": '12-35', "铁(毫克)": '10-42', "碳水化合物(克)": '',
                "维生素C(毫克)": '100-2000', "锰(毫克)": '4-11', "膳食纤维(克)": '25-30', "维生素E(毫克)": '14-700', "锌(毫克)": '8.5-40', "维生素A(微克)": '600-3000', "铜(毫克)": '0.7-8',"钾(毫克)": 2000, "磷(毫克)": '680-3000', "钠(毫克)": 1400, "硒(微克)": '60-400'
            }
            if pal[0] == "低":
                target_dict["热量(千卡)"] = 1500
                target_dict["蛋白质(克)"] = '62-75'
                target_dict["碳水化合物(克)"] = '187.5-243.75'
                target_dict["脂肪(克)"] = '33.33-50'
            elif pal[0] == "中":
                target_dict["热量(千卡)"] = 1750
                target_dict["蛋白质(克)"] = '62-87.5'
                target_dict["碳水化合物(克)"] = '218.75-284.375'
                target_dict["脂肪(克)"] = '38.89-58.3'
            else:
                print('未设定')

    # 提取字典中所有浮点数值到列表
    parsed_values = {k: parse_range(v) for k, v in target_dict.items()}
    keys_to_remove = ['热量(千卡)', '碳水化合物(克)']
    for key in keys_to_remove:
        parsed_values.pop(key, None)  # 使用 pop 并设置默认值，避免键不存在时报错
    # values = np.array([v for sublist in parsed_values.values() for v in sublist])
    # print(values)
    #values = np.array([value/3 for value in target_dict .values()])

    return parsed_values


def parse_range(value):
    if isinstance(value, str) and '-' in value:
        low, high = value.split('-')
        return float(low) / 3, float(high) / 3
    else:
        return value / 3


# 检查适合性
def check_suitability(nutrient_sums, target_nutrients):
    suitability = []
    for i, (key, value) in enumerate(target_nutrients.items()):
        if isinstance(value, float):
            tolerance = 0.1 * value
            lower_bound = value - tolerance
            upper_bound = value + tolerance
            if lower_bound <= nutrient_sums[i] <= upper_bound:
                suitability.append(1)
            else:
                suitability.append(0)
        elif isinstance(value, tuple):
            if value[0] <= nutrient_sums[i] <= value[1]:
                suitability.append(1)
            else:
                suitability.append(0)
        #print(suitability)
    return suitability


# 定义目标函数
def objective_function(v, ingredients, nutrition_df, target_nutrients):
    new_ingredients = [(name, new_amount) for (name, old_amount), new_amount in zip(ingredients, v)]
    nutrient_sums = calculate_nutrients(new_ingredients, nutrition_df)
    suitability = check_suitability(nutrient_sums, target_nutrients)
    # print(suitability)
    #print(np.sum(1 - np.array(suitability)))
    return np.sum(1 - np.array(suitability))

def check_suitability0(nutrient_sums, target_nutrients):#,recipe,matched_ing):
    # print(nutrient_sums)
    # print(target_nutrients)
    suitability = True
    truenum=0
    falsenum = 0
    yes=''
    no=''
    for i, (key, value) in enumerate(target_nutrients.items()):
        if isinstance(value, float):#没有最大摄入量的营养素怎么考虑？
            tolerance = 0.1 * value
            # # 下限和上限
            lower_bound = value - tolerance
            upper_bound = value + tolerance
            if lower_bound <= nutrient_sums[i] <= upper_bound:
                #suitability = True

                s1=f"{key}: {nutrient_sums[i]}符合,"
                # print(s1)
                yes = yes + s1
            else:
                #suitability = False

                s2=f"{key}: {nutrient_sums[i]}不合适,"
                # print(s2)
                no = no + s2
            #suitability = True

        elif isinstance(value, tuple):
            if value[0] <= nutrient_sums[i] <= value[1]:
                #suitability=True
                s3=f"{key}: {nutrient_sums[i]} within {value},"
                # print(s3)
                yes = yes + s3
            else:
                #suitability=False
                s4=f"{key}: {nutrient_sums[i]} not {value},"
                # print(s4)
                no = no + s4
        # if suitability == False:#有一个营养素不符合要求break
        #     break
    #以下是如果truenum>falsenum，suitability = True
    #     if suitability==True:
    #         truenum=truenum+1
    #     else:
    #         falsenum=falsenum+1
    # print(truenum)
    # print(falsenum)
    #
    # if truenum>falsenum:
    #     suitability = True
    # else:
    #     suitability = False
    yes=yes.rstrip(',')
    no=no.rstrip(',')
    return suitability,yes,no


# 定义保存结果到 CSV 的函数
def save_results_to_csv(results, file_path='./results2.csv'):
    # 创建用于保存结果的列表
    output_data = []

    # 处理每个结果
    for result in results:
        index = result['index']
        ingredients = result['ingredients']
        suitable_combinations = result['suitable_combinations']

        # 将 suitable_combinations 转换为字符串
        suitable_combinations_str = "; ".join([f" {age_range}_{gender}_{pal},YES: {yes}, NO: {no}" for age_range, gender, pal,yes,no in suitable_combinations])

        # 创建一行数据
        row_data = {
            'index': index,
            'nutrient_sums': ingredients,
            'suitable_combinations': suitable_combinations_str
        }

        # 添加到输出数据中
        output_data.append(row_data)

    # 转换为 DataFrame
    df = pd.DataFrame(output_data)

    # 保存为 CSV 文件
    df.to_csv(file_path, index=False, encoding='utf-8-sig')
    print(f"结果已保存到 {file_path}")

# 主函数
if __name__ == '__main__':
    file_path = r'D:\code\MOBO\zj\analysis_recipes\file\output_wenxin\sampled_output.csv' #'./file_分析/(18, 30)_男_低_results_1000.csv'
    data = pd.read_csv(file_path)

    nutrition_df = load_nutrition_data()
    age_ranges = [(18, 30)] #[(50, 65)]
    gender = ['女']  # ['男', '女']
    pal = ['低']
    for age_range in age_ranges:
        results = []
        age = (age_range[0] + age_range[1]) / 2
        for index, row in data.iterrows():
            print(row['nutrient_sums'])
            ingredients_list = row['nutrient_sums'].split(',')
            # 初始化结果列表
            ingredients = []
            suitable_combinations=[]
            # 遍历每一个食材信息
            for item in ingredients_list:
                # 去除多余空格，并按冒号分割
                try:
                    name, amount = re.split(r':|：|: |： ', item.strip())
                    # name, amount = item.strip().split(':')
                    # 去除单位并转换为整数
                    amount = float(amount.replace('克.', '').replace('克', '').strip())
                except:
                    continue
                # 添加为元组到结果列表
                if "水" not in name and "冰块" not in name and "白开" not in name:
                    ingredients.append((name.strip(), amount))
            print(ingredients)
            if len(ingredients) < 2:
                break

            target_nutrients = obtain_target(age, gender, pal)

            bounds = []
            for ingredient, amount in ingredients:
                lower_bound =0 #amount - amount *1
                upper_bound = amount + amount *1
                bounds.append([lower_bound, upper_bound])

            bounds_array = np.array(bounds)

            # # 优化调用
            # abc = ABC(
            #     obj_func=lambda v: objective_function(v, ingredients, nutrition_df, target_nutrients),
            #     num_variables=len(ingredients),
            #     bounds=bounds_array,
            #     colony_size=10,
            #     num_iter=1000,
            #     limit=100
            # )
            #
            # best_solution, best_fitness, timer = abc.optimize(verbose=True)
            # de = DifferentialEvolution(
            #     objective_function=lambda v: objective_function(v, ingredients, nutrition_df, target_nutrients),
            #     bounds=bounds_array,
            #     max_iter=1000
            #     )
            #
            # # Run the optimization for 1000 iterations
            # best_solution, best_fitness, timer = de.optimize(True)

            pso = PSO(
                obj_func=lambda v: objective_function(v, ingredients, nutrition_df, target_nutrients),
                bounds=bounds_array,
                num_particles=50,
                num_iterations=1000)
            best_solution, best_fitness, timer= pso.optimize(verbose=True)
            # print('Best solution:', best_solution)
            # print('Best fitness:', best_fitness)
            # 对应的新用量
            # 将新用量和食材名称组合
            updated_ingredients = [(ingredients[i][0], best_solution[i]) for i in range(len(ingredients))]
            # 打印更新后的食材和用量列表
            print(updated_ingredients)
            nutrient_sums_new = calculate_nutrients(updated_ingredients,  nutrition_df)
            suitability, yes, no = check_suitability0(nutrient_sums_new, target_nutrients)
            if suitability:
                suitable_combinations.append((age_range, gender[0], pal[0], yes, no))
            if suitable_combinations != []:
                results.append({
                    'index': index,
                    'ingredients': updated_ingredients,
                    'suitable_combinations': suitable_combinations
                })#

        file_name = 'D:\code\MOBO\zj\\analysis_recipes\\no_add_newingredient\pso/'+ str(age_range) + '_女_低_sampled_output_PSO.csv'
        save_results_to_csv(results, file_name)
